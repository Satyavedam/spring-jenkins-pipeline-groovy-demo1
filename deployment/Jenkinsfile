pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "mvn"
    }

    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git url: 'https://github.com/satyavedam/spring-jenkins-pipeline-groovy-demo1.git'

                // Run Maven on a Unix agent.
                script {
                    if (isUnix()) {
                        sh "mvn -Dmaven.test.failure.ignore=true clean package"
                    } else {
                        bat "mvn -Dmaven.test.failure.ignore=true clean package"
                    }
                }
            }
        }

        stage('Integration Test') {
            steps {
                // Run Maven on a Unix agent.
                script {
                    if (isUnix()) {
                        sh "mvn -Dmaven.test.failure.ignore=true clean verify"
                    } else {
                        bat "mvn -Dmaven.test.failure.ignore=true clean verify"
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    if (isUnix()) {
                        sh "docker build -t satyavedam123/spring-jenkins-ci-cd:latest ."
                    } else {
                        bat "docker build -t satyavedam123/spring-jenkins-ci-cd:latest ."
                    }
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                        sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
                        sh "docker push satyavedam123/spring-jenkins-ci-cd:latest"
                    }
                }
            }
        }
    }

    post {
        // If Maven was able to run the tests, even if some of the tests
        // failed, record the test results and archive the jar file.
        success {
            jacoco(
                classPattern: '**/target/classes',
                sourcePattern: '**/src/main/groovy'
            )
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts 'target/*.jar'
        }
    }
}
